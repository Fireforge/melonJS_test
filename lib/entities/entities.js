// Generated by CoffeeScript 1.7.1
game.MoleEntity = me.AnimationSheet.extend({
  init: function(x, y) {
    this.parent(x, y, me.loader.getImage("mole"), 178, 140);
    this.addAnimation("idle", [0]);
    this.addAnimation("laugh", [1, 2, 3, 2, 3, 1]);
    this.addAnimation("touch", [4, 5, 6, 4, 5, 6]);
    this.setCurrentAnimation("idle");
    this.isVisible = false;
    this.isOut = false;
    this.timer = 0;
    this.initialPos = this.pos.y;
    this.displayTween = null;
    this.hideTween = null;
    me.input.registerPointerEvent("mousedown", this, this.onMouseDown.bind(this));
  },

  /*
  callback for mouse click
   */
  onMouseDown: function() {
    if (this.isOut === true) {
      this.isOut = false;
      this.setCurrentAnimation("touch", this.hide.bind(this));
      this.flicker(20);
      me.audio.play("ow");
      game.data.score += 100;
      if (game.data.hiscore < game.data.score) {
        game.data.hiscore = game.data.score;
        me.save.hiscore = game.data.hiscore;
      }
      return false;
    }
  },

  /*
  display the mole
  goes out of the hole
   */
  display: function() {
    var finalpos;
    finalpos = this.initialPos - 140;
    this.displayTween = me.entityPool.newInstanceOf("me.Tween", this.pos).to({
      y: finalpos
    }, 200);
    this.displayTween.easing(me.Tween.Easing.Quadratic.Out);
    this.displayTween.onComplete(this.onDisplayed.bind(this));
    this.displayTween.start();
    this.isVisible = true;
  },

  /*
  callback when fully visible
   */
  onDisplayed: function() {
    this.isOut = true;
    this.timer = me.timer.getTime();
  },

  /*
  hide the mole
  goes into the hole
   */
  hide: function() {
    var finalpos;
    finalpos = this.initialPos;
    this.displayTween = me.entityPool.newInstanceOf("me.Tween", this.pos).to({
      y: finalpos
    }, 200);
    this.displayTween.easing(me.Tween.Easing.Quadratic.In);
    this.displayTween.onComplete(this.onHidden.bind(this));
    this.displayTween.start();
  },

  /*
  callback when fully visible
   */
  onHidden: function() {
    this.isVisible = false;
    this.setCurrentAnimation("idle");
  },

  /*
  update the mole
   */
  update: function() {
    if (this.isVisible) {
      this.parent();
      if (this.isOut === true) {
        if ((me.timer.getTime() - this.timer) > 500) {
          this.isOut = false;
          this.setCurrentAnimation("laugh");
          this.hide();
          game.data.score -= 25;
          if (game.data.score < 0) {
            game.data.score = 0;
          }
        }
        return true;
      }
    }
    return this.isVisible;
  }
});


/*
a mole manager (to manage movement, etc..)
 */

game.MoleManager = me.ObjectEntity.extend({
  moles: [],
  timer: 0,
  init: function() {
    var i, settings;
    settings = {};
    settings.width = 10;
    settings.height = 10;
    this.parent(0, 0, settings);
    i = 0;
    while (i < 3) {
      this.moles[i] = new game.MoleEntity(112 + (i * 310), 127 + 40);
      me.game.add(this.moles[i], 15);
      i++;
    }
    i = 3;
    while (i < 6) {
      this.moles[i] = new game.MoleEntity(112 + ((i - 3) * 310), 383 + 40);
      me.game.add(this.moles[i], 35);
      i++;
    }
    i = 6;
    while (i < 9) {
      this.moles[i] = new game.MoleEntity(112 + ((i - 6) * 310), 639 + 40);
      me.game.add(this.moles[i], 55);
      i++;
    }
    this.timer = me.timer.getTime();
  },
  update: function() {
    var hole, i;
    if ((me.timer.getTime() - this.timer) > 500) {
      i = 0;
      while (i < 9) {
        hole = Number.prototype.random(0, 2) + i;
        if (!this.moles[hole].isOut && !this.moles[hole].isVisible) {
          this.moles[hole].display();
        }
        i += 3;
      }
      this.timer = me.timer.getTime();
    }
    return false;
  }
});
